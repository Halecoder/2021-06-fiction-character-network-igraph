)
ggsave(
file = p3_path, plot = plot_network,
device = "pdf", width = 7, height = 5, dpi = 600
)
pdf.options(family = "GB1")
## global options==================================
knitr::opts_chunk$set(
width = 80,
fig.width = 8,
fig.asp = 0.75,
out.width = "100%",
fig.align = "center",
fig.path = "figure/",
fig.show = "asis",
warn = 1,
warning = FALSE,
message = FALSE,
echo = TRUE, # 是否显示代码
eval = TRUE, # 是否运行代码块
tidy = F, # 代码排版
comment = "#", # 每行输出的前缀，为了方便复制粘贴时不会污染代码
collapse = T, # 代码与结果是否显示在同一代码块
cache = T,
cache.comments = T,
autodep = T # 自动获得模块间依赖，cache 用
)
## load necessary packages==============================
library(tidyverse)
library(data.table)
library(magrittr)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(showtext)
library(pacman)
p_load(igraph, ggraph, tidygraph)
pdf.options(family = "GB1")
## showtext_auto(enable = TRUE)
# 自定义网络图样式========================================
mytheme_graph <- theme_void() +
theme(
text = element_text(family = "GB1"), # 所有的文本字体
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(
hjust = 0, size = 6,
margin = margin(8, 0, 0, 0, "pt")
),
plot.margin = margin(12, 0, 12, 10, "pt"),
legend.position = "right",
legend.justification = "left",
legend.margin = margin(4, 0, 0, 0, "pt"),
legend.key.size = unit(0.7, "lines"),
legend.title = element_text(
size = 7, margin = margin(0, 8, 0, 4, "pt")
),
legend.text = element_text(
size = 6, margin = margin(0, 8, 0, 4, "pt")
)
)
plot_network <- ggraph::ggraph(graph_tg, layout = "kk") +
geom_edge_fan(
aes(edge_width = intimate),
color = "lightblue",
end_cap = circle(0.05, "inches"),
show.legend = T
) +
geom_node_point(
aes(size = deg, fill = factor(group)),
# 点的大小也可以映射为人物出现次数等指标
# 如 size = count/n_para/n_words
shape = 21
) +
geom_node_text(
aes(label = name),
size = 2.5,
vjust = 1, hjust = 1
) +
scale_color_discrete() +
scale_edge_width(range = c(0.1, 2)) +
guides(fill = F) +
labs(
title = "人物关系网络图",
subtitle = str_c('集聚系数: ', round(transitivity(graph_tg), 4)),
size = "标准化的中介中心度",
edge_width = "共同出现的段落字数",
caption = "data source: 网络上随处可见的小说原文"
) +
mytheme_graph
ggsave(
file = p4_path, plot = plot_network,
device = "png", width = 7, height = 5, dpi = 600
)
plot_network
ggsave(
file = p3_path, plot = plot_network,
device = "pdf", width = 7, height = 5, dpi = 600
)
ggsave(
file = p3_path, plot = plot_network,
device = "pdf", width = 7, height = 5
)
## initialize
book_path <- str_glue("./txt/{book_name}.txt")
name_list_path <- str_glue("./txt/{book_name}人物名单.txt")
p1_path <- str_glue("./figure/{book_name}人物字数.html")
p2_path <- str_glue("./figure/{book_name}人物次数.html")
p3_path <- str_glue("./figure/{book_name}人物关系图.pdf")
p4_path <- str_glue("./figure/{book_name}人物关系图.png")
ggsave(
file = p3_path, plot = plot_network,
device = "pdf", width = 7, height = 5
)
# 转换为tbl_graph类对象
graph_tg <- graph %>%
tidygraph::as_tbl_graph() %>%
mutate(deg = centrality_betweenness(normalized = T)) %>%
# 添加中介中心度
mutate(group = group_infomap()) # 添加节点群
# 绘制网络图
set.seed(1)
plot_network <- ggraph::ggraph(graph_tg, layout = "kk") +
geom_edge_fan(
aes(edge_width = intimate),
color = "lightblue",
end_cap = circle(0.05, "inches"),
show.legend = T
) +
geom_node_point(
aes(size = deg, fill = factor(group)),
# 点的大小也可以映射为人物出现次数等指标
# 如 size = count/n_para/n_words
shape = 21
) +
geom_node_text(
aes(label = name),
size = 2.5,
vjust = 1, hjust = 1
) +
scale_color_discrete() +
scale_edge_width(range = c(0.1, 2)) +
guides(fill = F) +
labs(
title = "人物关系网络图",
subtitle = str_c('集聚系数: ', round(transitivity(graph_tg), 4)),
size = "标准化的中介中心度",
edge_width = "共同出现的段落字数",
caption = "Data Source: 网络上随处可见的小说原文"
) +
mytheme_graph
ggsave(
file = p3_path, plot = plot_network,
device = "pdf", width = 8, height = 6
)
ggsave(
file = p4_path, plot = plot_network,
device = "png", width = 7, height = 5, dpi = 600
)
plot_network
styler:::style_active_file()
styler:::style_selection()
## global options==================================
knitr::opts_chunk$set(
width = 80,
fig.width = 8,
fig.asp = 0.75,
out.width = "100%",
fig.align = "center",
fig.path = "figure/",
fig.show = "asis",
warn = 1,
warning = FALSE,
message = FALSE,
echo = TRUE, # 是否显示代码
eval = TRUE, # 是否运行代码块
tidy = F, # 代码排版
comment = "#", # 每行输出的前缀，为了方便复制粘贴时不会污染代码
collapse = F, # 代码与结果是否显示在同一代码块
cache = T,
cache.comments = T,
autodep = T # 自动获得模块间依赖，cache 用
)
## load necessary packages==============================
library(tidyverse)
library(data.table)
library(magrittr)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(showtext)
library(pacman)
p_load(igraph, ggraph, tidygraph)
pdf.options(family = "GB1")
## showtext_auto(enable = TRUE)
# 自定义网络图样式========================================
mytheme_graph <- theme_void() +
theme(
text = element_text(family = "GB1"), # 所有的文本字体
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(
hjust = 0, size = 6,
margin = margin(8, 0, 0, 0, "pt")
),
plot.margin = margin(12, 0, 12, 10, "pt"),
legend.position = "right",
legend.justification = "left",
legend.margin = margin(4, 0, 0, 0, "pt"),
legend.key.size = unit(0.7, "lines"),
legend.title = element_text(
size = 7, margin = margin(0, 8, 0, 4, "pt")
),
legend.text = element_text(
size = 6, margin = margin(0, 8, 0, 4, "pt")
)
)
# 允许用户下载数据文件
xfun::embed_file(
p3_path,
text = str_glue("{book_name}人物关系网络图.pdf")
)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
## global options==================================
knitr::opts_chunk$set(
width = 80,
fig.width = 7,
fig.asp = 0.618,
out.width = "100%",
fig.align = "center",
fig.path = "figure/",
fig.show = "asis",
warn = 1,
warning = FALSE,
message = FALSE,
echo = TRUE, # 是否显示代码
eval = TRUE, # 是否运行代码块
tidy = F, # 代码排版
comment = "#", # 每行输出的前缀，为了方便复制粘贴时不会污染代码
collapse = F, # 代码与结果是否显示在同一代码块
cache = F,
cache.comments = T,
autodep = T # 自动获得模块间依赖，cache 用
)
## load necessary packages==============================
library(tidyverse)
library(data.table)
library(magrittr)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(showtext)
library(pacman)
p_load(igraph, ggraph, tidygraph)
pdf.options(family = "GB1")
## showtext_auto(enable = TRUE)
# 自定义网络图样式========================================
mytheme_graph <- theme_void() +
theme(
text = element_text(family = "GB1"), # 所有的文本字体
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(
hjust = 0, size = 6,
margin = margin(8, 0, 0, 0, "pt")
),
plot.margin = margin(12, 0, 12, 10, "pt"),
legend.position = "right",
legend.justification = "left",
legend.margin = margin(4, 0, 0, 0, "pt"),
legend.key.size = unit(0.7, "lines"),
legend.title = element_text(
size = 7, margin = margin(0, 8, 0, 4, "pt")
),
legend.text = element_text(
size = 6, margin = margin(0, 8, 0, 4, "pt")
)
)
plot(graph, layout=layout_with_kk, vertex.color="green")
plot_network <- ggraph::ggraph(graph_tg, layout = "kk") +
geom_edge_fan(
aes(edge_width = intimate),
color = "lightblue",
end_cap = circle(0.05, "inches"),
show.legend = T
) +
geom_node_point(
aes(size = deg, fill = factor(group)),
# 点的大小也可以映射为人物出现次数等指标
# 如 size = count/n_para/n_words
shape = 21
) +
geom_node_text(
aes(label = name),
size = 2.5,
vjust = 1, hjust = 1
) +
scale_color_discrete() +
scale_edge_width(range = c(0.1, 2)) +
guides(fill = F) +
labs(
title = "人物关系网络图",
subtitle = str_c("集聚系数: ", round(transitivity(graph_tg), 4)),
size = "标准化的中介中心度",
edge_width = "共同出现的段落字数",
caption = "Data Source: 网络上随处可见的小说原文"
) +
mytheme_graph
plot_network
plot(cfg, graph) ## 只有 showtext_auto(enable = FALSE) 该图才能正常显示
plot(cfg, graph) ## 只有 showtext_auto(enable = FALSE) 该图才能正常显示
plot_dendrogram(cfg)
plot(cfg, graph)
a <- plot(cfg, graph)
a %>% class()
png('test.png')
plot(cfg, graph)
dev.off()
png('test.png')
plot(cfg, graph)
png('test.png')
plot(cfg, graph)
dev.off()
png('test.png')
x <- 1:5
y <- 2:6
plot(x, y)
dev.off()
png(cluster_path, width = 7, height = 5)
## global options==================================
knitr::opts_chunk$set(
width = 80,
fig.width = 7,
fig.asp = 0.618,
out.width = "100%",
fig.align = "center",
fig.path = "figure/",
fig.show = "asis",
warn = 1,
warning = FALSE,
message = FALSE,
echo = TRUE, # 是否显示代码
eval = TRUE, # 是否运行代码块
tidy = F, # 代码排版
comment = "#", # 每行输出的前缀，为了方便复制粘贴时不会污染代码
collapse = F, # 代码与结果是否显示在同一代码块
cache = F,
cache.comments = T,
autodep = T # 自动获得模块间依赖，cache 用
)
## load necessary packages==============================
library(tidyverse)
library(data.table)
library(magrittr)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(showtext)
library(pacman)
p_load(igraph, ggraph, tidygraph)
pdf.options(family = "GB1")
## showtext_auto(enable = TRUE)
# 自定义网络图样式========================================
mytheme_graph <- theme_void() +
theme(
text = element_text(family = "GB1"), # 所有的文本字体
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(
hjust = 0, size = 6,
margin = margin(8, 0, 0, 0, "pt")
),
plot.margin = margin(12, 0, 12, 10, "pt"),
legend.position = "right",
legend.justification = "left",
legend.margin = margin(4, 0, 0, 0, "pt"),
legend.key.size = unit(0.7, "lines"),
legend.title = element_text(
size = 7, margin = margin(0, 8, 0, 4, "pt")
),
legend.text = element_text(
size = 6, margin = margin(0, 8, 0, 4, "pt")
)
)
## config
book_name <- "红楼梦"
## initialize
book_path <- str_glue("./txt/{book_name}.txt")
name_list_path <- str_glue("./txt/{book_name}人物名单.txt")
p1_path <- str_glue("./figure/{book_name}人物出场段落总字数.html")
p2_path <- str_glue("./figure/{book_name}人物出场次数.html")
cluster_path <- str_glue("./figure/{book_name}聚类结果.png")
p3_path <- str_glue("./figure/{book_name}人物关系网络图.pdf")
p4_path <- str_glue("./figure/{book_name}人物关系网络图.png")
# 允许用户下载数据文件
xfun::embed_file(
book_path,
text = str_glue("小说文本下载: {book_name}.txt")
)
## 读取数据 ================================
origin_content <- book_path %>%
readLines(encoding = "UTF-8") %>%
str_trim() %>%
data.table(text = .) %>%
filter(text != "") %>%
drop_na()
name_list <- name_list_path %>%
readLines(encoding = "UTF-8") %>%
str_trim() %>%
data.table(name = .) %>%
filter(name != "") %>%
drop_na() %>%
pull(name) %>%
str_split(" ")
name_table <- data.table(
unique = name_list %>% map_chr(extract(1)),
pattern = name_list %>%
map_chr(~ str_c(., collapse = ")|(")) %>%
map_chr(~ str_glue("({.})"))
)
## 统一称呼==================================
# 对一段文本替换称呼，将其封装为函数
unify_names <- function(paragraph) {
# 此处不能用并行操作，因为不是同时操作n个对象
# 而是反复操作一个对象（paragraph），迭代n次
# cat(str_c(str_sub(paragraph, 1, 10)), "\n") # 运行时提示
reduce(
.x = seq_len(length(name_list)),
.f = function(text, i) {
if (name_list[[i]] %>% length() > 1) {
# 将人物的所有别称替换为统一的姓名
alias <- name_table$pattern[i]
unique_name <- name_table$unique[i]
text %>%
str_replace_all(alias, unique_name)
} else {
text
}
},
.init = paragraph
)
}
# 替换称呼
# 为了运行速度（提升数十倍），利用 data.table 的象牙操作符
# 原地替换，而非复制文本
origin_content[, `:=`(text = unify_names(text), id = 1:.N)]
## global options==================================
knitr::opts_chunk$set(
width = 80,
fig.width = 7,
fig.asp = 0.618,
out.width = "100%",
fig.align = "center",
fig.path = "figure/",
fig.show = "asis",
warn = 1,
warning = FALSE,
message = FALSE,
echo = TRUE, # 是否显示代码
eval = TRUE, # 是否运行代码块
tidy = F, # 代码排版
comment = "#", # 每行输出的前缀，为了方便复制粘贴时不会污染代码
collapse = F, # 代码与结果是否显示在同一代码块
cache = T,
cache.comments = T,
autodep = T # 自动获得模块间依赖，cache 用
)
## load necessary packages==============================
library(tidyverse)
library(data.table)
library(magrittr)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(showtext)
library(pacman)
p_load(igraph, ggraph, tidygraph)
pdf.options(family = "GB1")
## showtext_auto(enable = TRUE)
# 自定义网络图样式========================================
mytheme_graph <- theme_void() +
theme(
text = element_text(family = "GB1"), # 所有的文本字体
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
plot.caption = element_text(
hjust = 0, size = 6,
margin = margin(8, 0, 0, 0, "pt")
),
plot.margin = margin(12, 0, 12, 10, "pt"),
legend.position = "right",
legend.justification = "left",
legend.margin = margin(4, 0, 0, 0, "pt"),
legend.key.size = unit(0.7, "lines"),
legend.title = element_text(
size = 7, margin = margin(0, 8, 0, 4, "pt")
),
legend.text = element_text(
size = 6, margin = margin(0, 8, 0, 4, "pt")
)
)
pdf(cluster_path, width = 800, height = 550)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
unlink('network-graph_cache', recursive = TRUE)
